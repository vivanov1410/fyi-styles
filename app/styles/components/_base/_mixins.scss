/**
*
* Mixins
*
*/

@mixin media-query($media-query) {
  @if $media-query == small {
    @media only screen and (max-width: $medium - 1) { @content; }
  }

  @if $media-query == medium {
    @media only screen and (min-width: $medium) { @content; }
  }

  @if $media-query == medium-only {
    @media only screen and (min-width: $medium) and (max-width: $wide - 1) { @content; }
  }

  @if $media-query == wide {
    @media only screen and (min-width: $wide) { @content; }
  }

  @if $media-query == huge {
    @media only screen and (min-width: $huge) { @content; }
  }
}

@mixin small-only { @include media-query(small) { @content }; }
@mixin medium { @include media-query(medium) { @content }; }
@mixin medium-only { @include media-query(medium-only) { @content }; }
@mixin wide { @include media-query(wide) { @content }; }
@mixin huge { @include media-query(huge) { @content }; }

// Mixin to constrain elements
@mixin container($isRelative: false) {
  box-sizing: content-box;

  @if $isRelative {
    position: relative;
  }

  padding-left: 5%;
  padding-right: 5%;
  margin-left: auto;
  margin-right: auto;


  @include medium {
    padding-left: 4.8%;
    padding-right: 4.8%;
    max-width: $mediumContainer;
  }

  @include wide {
    padding-left: 4.4%;
    padding-right: 4.4%;
    max-width: $wideContainer;
  }
}

// Mixin to show a baseline grid
// only visible when body has 'debug' class
@mixin baseline-grid() {
  position: relative;

  &::after {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    bottom: 0;
    right: 0;
    width: 100%;
    z-index: 9;

    display: none;
    background-image: linear-gradient(to bottom, rgba(0,0,0,0.15) 95%,rgba(0,0,0,0.15) 100%);

    background-size: 100% 26px;
  }

  &.debug::after {
    display: block;
    pointer-events: none;
  }
}

// Mixins simply to store CSS rules
@mixin rule--small {
  font-size: $fontSmall;
  line-height: 2.0000em; /* 26px */
  padding-top: 2.0000em;
  padding-bottom: 0;
}

@mixin rule--base {
  font-size: $fontBase;
  line-height: 1.6250em; /* 26px */
  padding-top: 1.6250em;
  padding-bottom: 0;
}

@mixin rule--medium {
  font-size: $fontMedium;
  font-weight: 300;
  line-height: 1.3000em; /* 26px */
  padding-top: 1.3000em;
  padding-bottom: 0;
}

@mixin rule--large {
  font-family: $fontHighlight;
  font-size: $fontLarge;
  font-weight: 300;
  line-height: 1.0000em; /* 26px */
  padding-top: 1.0000em;
  padding-bottom: 0;
}

@mixin rule--xlarge {
  font-family: $fontHighlight;
  font-size: $fontXLarge;
  font-weight: 300;
  line-height: 1.2381em; /* 52px */
  padding-top: 0.6190em;
  padding-bottom: 0;
}

@mixin rule--huge {
  font-family: $fontHighlight;
  font-size: $fontHuge;
  font-weight: 300;
  line-height: 1.1471em; /* 78px */
  padding-top: 0.3824em;
  padding-bottom: 0;
}

// Mixins to determine which rule to use at which breakpoint
@mixin type--small($isFromMixin: false) {
  @include rule--small;
}

@mixin type--base($isFromMixin: false) {
  @include rule--base;
}

@mixin type--medium($isFromMixin: false) {
  @if $isFromMixin == false {
    @include type--base(true);
    @include wide {
      @include rule--medium;
    }
  }
  @else {
    @include rule--medium;
  }
}

@mixin type--large($isFromMixin: false) {
  @if $isFromMixin == false {
    @include type--medium(true);
    @include wide {
      @include rule--large;
    }
  }
  @else {
    @include rule--large;
  }
}

@mixin type--xlarge($isFromMixin: false) {
  @if $isFromMixin == false {
    @include type--large(true);
    @include wide {
      @include rule--xlarge;
    }
  }
  @else {
    @include rule--xlarge;
  }
}

@mixin type--huge($isFromMixin: false) {
  @if $isFromMixin == false {
    @include type--xlarge(true);
    @include wide {
      @include rule--huge;
    }
  }
  @else {
    @include rule--huge;
  }
}

// LISTS
@mixin bullet-type($bullet, $icon: false) {
  &::before {
    @if $icon {
      font-family: $fontIcon;
      @extend .#{$icon}::before;
      font-size: $fontSmall;
    }
    @else {
      content: $bullet;
      font-family: $fontHighlight;
    }

    display: block;
    font-weight: 400;
    position: absolute;
    top: 0;
    left: 0;
    line-height: $lineHeight;

  }
}

// Mixin to create links
@mixin style-cta($textColor, $linkIcon: false) {
  font-family: $fontHighlight;
  color: $textColor;
  font-weight: 400;
  display: inline-block;
  line-height: 1;

  &:hover {
    color: $colorGrayDark;
  }

  @if $linkIcon {
    text-decoration: none;
    &::before {
      display: inline-block;
      padding-right: 10px;
      font-family: $fontIcon;
      line-height: ($lineHeight) - 1; // remove 1px from line-height to fix baseline alignment
      font-size: $fontSmall;
      content: $linkIcon;
    }
  }
}

// Mixin to create highlight modules
@mixin highlight-symbol($verticalOffset: 0, $horizontalOffset: 45px, $fontSize: 130px) {
  position: relative;

  &::before {
    display: none;

    @include medium {
      display: block;
      position: absolute;
      top: 106px;
      right: $horizontalOffset;

      font-family: $fontIcon;
      font-size: $fontSize;
      line-height: 1px;
      text-align: center;
      height: 100%;
      width: $mediumColWidth;
      color: #ffffff;
    }

    .highlight-module--left & {
      right: auto;
      left: $horizontalOffset;
    }

    @include wide {
      top: 134px;
      width: $wideColWidth;
      font-size: $fontSize + 50;

      .highlight-module--large & {
        font-size: $fontSize + 300;
      }
    }
  }
}

// Grid CSS rules
@mixin rule--col($mediaQuery) {
  @if $mediaQuery == medium {
    float: left;
    margin-right: $mediumGutterWidth;
  }

  @if $mediaQuery == wide {
    float: left;
    margin-right: $wideGutterWidth;
  }
}

/**
 * Other
 */

// Clearfix
//
// For modern browsers
// 1. The space content is one way to avoid an Opera bug when the
//    contenteditable attribute is included anywhere else in the document.
//    Otherwise it causes space to appear at the top and bottom of elements
//    that are clearfixed.
// 2. The use of `table` rather than `block` is only necessary if using
//    `:before` to contain the top-margins of child elements.
//
// Source: http://nicolasgallagher.com/micro-clearfix-hack/

@mixin clearfix() {
  &:before,
  &:after {
    content: " "; // 1
    display: table; // 2
  }
  &:after {
    clear: both;
  }
}

// Framework grid generation
//
// Used only by Bootstrap to generate the correct number of grid classes given
// any value of `$grid-columns`.

@mixin make-grid-columns($i: 1, $list: ".l-col-xs-#{$i}, .l-col-sm-#{$i}, .l-col-md-#{$i}, .l-col-lg-#{$i}") {
  @for $i from (1 + 1) through $grid-columns {
    $list: "#{$list}, .l-col-xs-#{$i}, .l-col-sm-#{$i}, .l-col-md-#{$i}, .l-col-lg-#{$i}";
  }
  #{$list} {
    position: relative;
    // Prevent columns from collapsing when empty
    min-height: 1px;
    // Inner gutter via padding
    padding-left:  ($grid-gutter-width / 2);
    padding-right: ($grid-gutter-width / 2);
  }
}


// [converter] This is defined recursively in LESS, but Sass supports real loops
@mixin float-grid-columns($class, $i: 1, $list: ".l-col-#{$class}-#{$i}") {
  @for $i from (1 + 1) through $grid-columns {
    $list: "#{$list}, .l-col-#{$class}-#{$i}";
  }
  #{$list} {
    float: left;
  }
}


@mixin calc-grid-column($index, $class, $type) {
  @if ($type == width) and ($index > 0) {
    .l-col-#{$class}-#{$index} {
      width: percentage(($index / $grid-columns));
    }
  }
  @if ($type == push) and ($index > 0) {
    .l-col-#{$class}-push-#{$index} {
      left: percentage(($index / $grid-columns));
    }
  }
  @if ($type == push) and ($index == 0) {
    .l-col-#{$class}-push-0 {
      left: auto;
    }
  }
  @if ($type == pull) and ($index > 0) {
    .l-col-#{$class}-pull-#{$index} {
      right: percentage(($index / $grid-columns));
    }
  }
  @if ($type == pull) and ($index == 0) {
    .l-col-#{$class}-pull-0 {
      right: auto;
    }
  }
  @if ($type == offset) {
    .l-col-#{$class}-offset-#{$index} {
      margin-left: percentage(($index / $grid-columns));
    }
  }
}

// [converter] This is defined recursively in LESS, but Sass supports real loops
@mixin loop-grid-columns($columns, $class, $type) {
  @for $i from 0 through $columns {
    @include calc-grid-column($i, $class, $type);
  }
}


// Create grid for specific class
@mixin make-grid($class) {
  @include float-grid-columns($class);
  @include loop-grid-columns($grid-columns, $class, width);
  @include loop-grid-columns($grid-columns, $class, pull);
  @include loop-grid-columns($grid-columns, $class, push);
  @include loop-grid-columns($grid-columns, $class, offset);
}

// Grid system
//
// Generate semantic grid columns with these mixins.

// Centered container element
@mixin container-fixed($gutter: $grid-gutter-width) {
  margin-right: auto;
  margin-left: auto;
  padding-left:  ($gutter / 2);
  padding-right: ($gutter / 2);
  @include clearfix();
}

// Creates a wrapper for a series of columns
@mixin make-row($gutter: $grid-gutter-width) {
  margin-left:  ($gutter / -2);
  margin-right: ($gutter / -2);
  @include clearfix();
}

// Generate the extra small columns
@mixin make-xs-column($columns, $gutter: $grid-gutter-width) {
  position: relative;
  float: left;
  width: percentage(($columns / $grid-columns));
  min-height: 1px;
  padding-left:  ($gutter / 2);
  padding-right: ($gutter / 2);
}
@mixin make-xs-column-offset($columns) {
  margin-left: percentage(($columns / $grid-columns));
}
@mixin make-xs-column-push($columns) {
  left: percentage(($columns / $grid-columns));
}
@mixin make-xs-column-pull($columns) {
  right: percentage(($columns / $grid-columns));
}

// Generate the small columns
@mixin make-sm-column($columns, $gutter: $grid-gutter-width) {
  position: relative;
  min-height: 1px;
  padding-left:  ($gutter / 2);
  padding-right: ($gutter / 2);

  @media (min-width: $screen-sm-min) {
    float: left;
    width: percentage(($columns / $grid-columns));
  }
}
@mixin make-sm-column-offset($columns) {
  @media (min-width: $screen-sm-min) {
    margin-left: percentage(($columns / $grid-columns));
  }
}
@mixin make-sm-column-push($columns) {
  @media (min-width: $screen-sm-min) {
    left: percentage(($columns / $grid-columns));
  }
}
@mixin make-sm-column-pull($columns) {
  @media (min-width: $screen-sm-min) {
    right: percentage(($columns / $grid-columns));
  }
}

// Generate the medium columns
@mixin make-md-column($columns, $gutter: $grid-gutter-width) {
  position: relative;
  min-height: 1px;
  padding-left:  ($gutter / 2);
  padding-right: ($gutter / 2);

  @media (min-width: $screen-md-min) {
    float: left;
    width: percentage(($columns / $grid-columns));
  }
}
@mixin make-md-column-offset($columns) {
  @media (min-width: $screen-md-min) {
    margin-left: percentage(($columns / $grid-columns));
  }
}
@mixin make-md-column-push($columns) {
  @media (min-width: $screen-md-min) {
    left: percentage(($columns / $grid-columns));
  }
}
@mixin make-md-column-pull($columns) {
  @media (min-width: $screen-md-min) {
    right: percentage(($columns / $grid-columns));
  }
}

// Generate the large columns
@mixin make-lg-column($columns, $gutter: $grid-gutter-width) {
  position: relative;
  min-height: 1px;
  padding-left:  ($gutter / 2);
  padding-right: ($gutter / 2);

  @media (min-width: $screen-lg-min) {
    float: left;
    width: percentage(($columns / $grid-columns));
  }
}
@mixin make-lg-column-offset($columns) {
  @media (min-width: $screen-lg-min) {
    margin-left: percentage(($columns / $grid-columns));
  }
}
@mixin make-lg-column-push($columns) {
  @media (min-width: $screen-lg-min) {
    left: percentage(($columns / $grid-columns));
  }
}
@mixin make-lg-column-pull($columns) {
  @media (min-width: $screen-lg-min) {
    right: percentage(($columns / $grid-columns));
  }
}
